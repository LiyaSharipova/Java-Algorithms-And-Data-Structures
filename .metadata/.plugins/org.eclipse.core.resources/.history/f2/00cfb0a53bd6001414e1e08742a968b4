package ru.kpfu.itis.group11403.sharipova.map;

import java.util.Collection;
import java.util.Map;
import java.util.Set;


public class MyHashMap<V, K> implements MyMap<V, K> {
	public MyHashMap(int capacity) {
		elements = new Object[capacity];
	}
	private class Node{
		private V value;
		private K key;
		private Node next;
		public Node getNext() {
			return next;
		}
		public void setNext(Node next) {
			this.next = next;
		}
		public Node( K key, V value) {
			super();
			this.value = value;
			this.key = key;
		}

	}
	private int size;

	private Object[] elements;


	public int getIndex(Object key) {
        return Math.abs(key.hashCode() % elements.length);
	}
	@Override
	public int size() {
		return size;
	}
	@Override
	public V put(K key, V value) {
		if (key==null){
			throw new NullPointerException("key is null");
		}
		int index=getIndex(key);
		Node node= (Node) elements[index];
		if (node==null){
			elements[index]=new Node(key, value);
			size++;
			return value;
		}
		if (node.key.equals(key)){
			node.value=value;
			return value;
		}
		while(node.getNext()!=null){
			node=node.getNext();
			if (node.key.equals(key)){
				node.value=value;
				return value;
			}
			
		}
		node.setNext(new Node(key, value));
		size++;
		return value;
	}

	@Override
	public boolean isEmpty() {
		
		return size==0;
	}

	@Override
	public boolean containsKey(Object key) {
		int index=getIndex(key);
		Node node=(Node)elements[index];
		if (node.key.equals(key)){
			return true;
		}
		while(node.getNext()!=null){
			if (node.getNext().key.equals(key)){
				return true;
			}
			node=node.getNext();
		}
		return false;
	}

	@Override
	public boolean containsValue(Object value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public V get(Object key) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public V remove(Object key) {
		int index=getIndex(key);
		Node node=(Node)elements[index];
		if (node==null){
			return null;
		}
		if (node.key.equals(key)){
			V removedV=node.value;
			elements[index]=node.getNext();
			return removedV;
		}
		while(node.getNext()!=null){
			if (node.getNext().key.equals(key)){
				V removedV=node.getNext().value;
				node.setNext(node.);
			}
			node=node.getNext();
		}
		return false;
	}

	@Override
	public void putAll(Map<? extends K, ? extends V> m) {
		// TODO Auto-generated method stub

	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub

	}

	@Override
	public Set<K> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<V> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<java.util.Map.Entry<K, V>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}

}
