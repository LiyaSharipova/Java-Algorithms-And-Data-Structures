package commands;

import commands.*;
import interfaces.Command;
import interfaces.DirChanger;

import java.io.File;
import java.nio.file.NoSuchFileException;
import java.util.Scanner;



public class FileManager1 implements DirChanger {

	private File curDir;//тут будет храниться текущая директория


	FileManager1(){
		curDir = new File("C:\\");
	}

	@Override
	public File getDir() {
		return curDir;
	}

	@Override
	public void setDir(File newDir) {
		curDir = newDir;
	}

	public static void main(String[] args){
		FileManager1 mainTool = new FileManager1();
		Scanner scan = new Scanner(System.in);
		String cString = "command";
		CommandFactory factory = new CommandFactory();
		Command command= new Start();
		while(!(command instanceof Exit)){
			try{
				System.out.println("Current Directory: " + mainTool.curDir.getPath());
				System.out.println("Type /help to display possible commands.");
				cString = scan.nextLine();
				command=factory.create(cString, mainTool);
				command.execute(cString, mainTool);
			}
			catch(NoSuchCommandException| NoSuchFileException e){
				System.out.println(e.getMessage());
			}
		}
		//        while(!(factory.create(cString, mainTool) instanceof Exit));// /exit как отдельная команда? КОРРЕКТНЫЙ ВЫХОД
		//            System.out.println("Current Directory: " + mainTool.curDir.getPath());
		//            System.out.println("Type /help to display possible commands.");
		//            cString = scan.nextLine();
		//            if (factory.create(cString, mainTool)!=null)
		//                factory.create(cString, mainTool).execute(cString, mainTool);
		//        }
		scan.close();
	}










	//
	//    //ниже методы которые нам надо реализовать
	//    //ищет файлы по тэгу в указанной директории, f отвечает за вывод папок, должен ругаться на не существующую директорию
	//    //можно добавить аналог show in folder по индексу после поиска
	//
	//    //возвращает пользователя в директорию выше(не назад, а именно на уровень выше)
	//    void back(){
	//
	//    }
	//
	//    //рпечатает дерево директорий
	//    void print(int deep){
	//
	//    }
	//
	//    //поиск
	//    File[] search(File directory, String tag, int f){
	//        return null;
	//    }
	//
	//    //копирует файл, должен ругаться на неусществующий файл
	//    void copy(File file, File dir){
	//
	//    }
	//
	//    //создает директорию в текущей папке, должен ругаться на \/|*?:<>" в название
	//    void mkdir(String name){
	//
	//    }
	//
	//    //создает файл в текущей папке, должен ругаться на \/|*?:<>" в название
	//    void mkfile(String name){
	//
	//    }
	//
	//    //открывает файл, должен ругаться на несуществующий файл
	//    void open(File file){
	//
	//    }
	//
	//    //same
	//    void rename(File file, String newName){
	//
	//    }
	//
	//    //same
	//    void remove(File file){
	//
	//    }
	//
	//    //меняет кодировку на выбранную, тоже ругается на несуществующую команду
	//    void changeEncoding(String encode){//??????
	//
	//    }
	//
	//    //просто выводит перечень методов и моответствующии команды с кратким описанием
	//    void help(){
	//        System.out.println("/search 'folder name of path to folder' 'tag' ('-folder') - search file or folder if directory");
	//        System.out.println("/copy 'filename of path to file' 'directory for copy' - create copy of file");
	//        System.out.println("/mkdir 'name' - create directory in current directory");
	//        System.out.println("/mkfile 'name' - create file in current directory");
	//        System.out.println("/remove 'filename of path to file' - delete file or folder");
	//        System.out.println("/open 'filename of path to file' - open txt file or directory");
	//        System.out.println("/rename 'filename of path to file' 'new name' - rename file or folder");
	//        System.out.println("/encode ?????????");
	//        System.out.println("/exit - stop file manager");
	//    }


}
