package ru.kpfu.itis.group11403.sharipova.stack;

public class BracketsCheck {

	private static final char ROUND_OP='(';
	private static final char ROUND_CS=')';
	private static final char SQUARE_OP='[';
	private static final char SQUARE_CS=']';
	private static final char CURLY_OP='{';
	private static final char CURLY_CS='}';
	private static final char ANGLE_OP='<';
	private static final char ANGLE_CS='>';

	public static boolean isCorrect(String expr) {
		if(expr == null){
			throw new NullPointerException("String is null");
		}
		LinkedStack<Character> braketStack= new LinkedStack<Character>();
		char[] exprAr=expr.toCharArray();
		for (int i = 0; i < exprAr.length; i++) {
			switch (exprAr[i]) {
			case ROUND_OP: braketStack.push(exprAr[i]);			
			break;
			case ROUND_CS: 
				if (braketStack.peek()==ROUND_OP){
					braketStack.pop();
				}else{
					return false;
				}
				break;
			case SQUARE_OP: braketStack.push(exprAr[i]);			
			break;
			case SQUARE_CS: 
				if (braketStack.peek()==SQUARE_OP){
					braketStack.pop();
				}else{
					return false;
				}
				break;
			case CURLY_OP: braketStack.push(exprAr[i]);			
			break;
			case CURLY_CS: 
				if (braketStack.peek()==CURLY_OP){
					braketStack.pop();
				}else{
					return false;
				}
				break;
			case ANGLE_OP: braketStack.push(exprAr[i]);			
			break;
			case ANGLE_CS: 
				if (braketStack.peek()==ANGLE_OP){
					braketStack.pop();
				}else{
					return false;
				}
				break;
			default:
				break;
			}
		}
		if(braketStack.isEmpty()){
			return true;
		}else {
			return false;
		}
	}


	public static void main(String[] args) {
		System.out.println(isCorrect("(nhj+)"));

	}

}
